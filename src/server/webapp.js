const { render } = require('../functions/utils');
const {
    replyMessage,
    MESSAGE_TYPE,
    sendLineNotify,
    getUserProfile,
} = require('../functions/LineBot');

const Route = {};
Route.path = function(routeName, callback) {
    Route[routeName] = callback;
};

function loadUi() {
    return render('index');
}

const fmBuildingCondoName = async(sourceObj, messages) => {
        try {
            let userProfile = {};
            try {
                userProfile = await getUserProfile(sourceObj.source.userId, sourceObj.source.groupId);
                userProfile.displayName = userProfile.displayName ? userProfile.displayName : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠';
                Logger.log(`[sendLineNotify()] user information.${userProfile}`);
                await sendLineNotify(
                        `‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì ${
          userProfile.displayName !== '' ? `@${userProfile.displayName}` : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠'
        } ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞`
      );
      Logger.log(`[sendLineNotify()] ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì 
                ${
                  userProfile.displayName !== '' ? `@${userProfile.displayName}` : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠'
                } ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞`);
    } catch (error) {
      Logger.log('[sendLineNotify()] fails.');
    }

    const Progress = Tamotsu.Table.define({
      sheetName: 'Progress',
      rowShift: 1,
      columnShift: 0,
    });

    const query = Progress.where({
      Project: messages.trim(),
    }).first();
    Logger.log(`[fmBuildingCondoName()] query: ${query}`);
    if (query !== undefined && query !== null) {
      await replyMessage(
        sourceObj.replyToken,
        `‡∏Ñ‡∏∏‡∏ì ${
          userProfile.displayName !== '' ? `@${userProfile.displayName}` : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠'
        }\n‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${query['‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà']}\n‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: ${query['‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠']}\n‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${
          query['‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£']
        }\nEMail: ${query.EMail}\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Tower: ${query['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Tower']}\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£: ${
          query['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£']
        }\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á: ${query['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á']}\n‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö: ${query['‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö']}\nIFCC (ODF) : ${
          query['‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á IFCC (ODF)']
        }\nWall Box : ${query['Wall Box']}\nMicro Duct ‡πÅ‡∏ô‡∏ß‡∏î‡∏¥‡πà‡∏á : ${
          query['Micro Duct ‡πÅ‡∏ô‡∏ß‡∏î‡∏¥‡πà‡∏á']
        }\nMicro Duct ‡πÅ‡∏ô‡∏ß‡∏Ç‡∏ß‡∏≤‡∏á : ${query['Micro Duct ‡πÅ‡∏ô‡∏ß‡∏Ç‡∏ß‡∏≤‡∏á']}\nTOT Progress : ${
          query['TOT Progress']
        }\nAIS Progress : ${query['AIS Progress']}\n3BB Progress : ${query['3BB Progress']}`,
        MESSAGE_TYPE.NORMAL
      );
    } else {
      await replyMessage(
        sourceObj.replyToken,
        `‡∏Ñ‡∏∏‡∏ì ${
          userProfile.displayName !== '' ? `@${userProfile.displayName}` : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠'
        }\n‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ üôè ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß\n(‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏≠‡∏≤‡∏à‡∏™‡∏∞‡∏Å‡∏î‡∏ú‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ‡∏ú‡∏¥‡∏î)`,
        MESSAGE_TYPE.NORMAL
      );
    }
  } catch (error) {
    Logger.log(`[fmBuildingCondoName()] error: ${error}`);
  }
};

const fmBuildingOperator = async (
  sourceObj,
  emptyValue = false,
  columnNameLists = [],
  headers = ''
) => {
  try {
    let userProfile = {};
    try {
      userProfile = await getUserProfile(sourceObj.source.userId, sourceObj.source.groupId);
      userProfile.displayName = userProfile.displayName ? userProfile.displayName : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠';
      Logger.log(`[sendLineNotify()] user information.${userProfile}`);
      await sendLineNotify(
        `‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì ${
          userProfile.displayName !== '' ? `@${userProfile.displayName}` : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠'
        } ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞`
      );
    } catch (error) {
      Logger.log('[sendLineNotify()] fails.');
    }
    const Progress = Tamotsu.Table.define(
      {
        sheetName: 'Progress',
        rowShift: 1,
        columnShift: 0,
      },
      {
        operator(columnLists = []) {
          const vmThis = this;
          const columnList = columnLists.map((element) => {
            return [vmThis[element]];
          });
          return [columnList].join('');
        },
      }
    );
    Logger.log(`[fmBuildingOperator()] columnNameLists: ${columnNameLists}`);

    const query = Progress.where(function (doc) {
      if (emptyValue) {
        return doc.operator(columnNameLists).trim() === '';
      }
      return doc.operator(columnNameLists).trim() !== '';
    }).all();
    Logger.log(`[fmBuildingOperator()] query: ${JSON.stringify(query)}`);
    if (query !== undefined && query !== null) {
      let nooperatorList = '';
      query.forEach((r) => {
        if (r.Project.trim() !== '') {
          nooperatorList += `${r.Project}\n`;
        }
      });
      await replyMessage(
        sourceObj.replyToken,
        emptyValue
          ? `‡∏Ñ‡∏∏‡∏ì ${
              userProfile.displayName !== '' ? `@${userProfile.displayName}` : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠'
            } ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Ç‡πà‡∏≤‡∏¢ ${headers}\n ${
              nooperatorList.trim() === '' ? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏∞' : nooperatorList
            }`
          : `‡∏Ñ‡∏∏‡∏ì ${
              userProfile.displayName !== '' ? `@${userProfile.displayName}` : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠'
            } ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Ç‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß ${headers}\n ${
              nooperatorList.trim() === '' ? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏∞' : nooperatorList
            }`,
        MESSAGE_TYPE.NORMAL
      );
    } else {
      await replyMessage(
        sourceObj.replyToken,
        emptyValue
          ? `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ üôè ‡∏Ñ‡∏∏‡∏ì ${
              userProfile.displayName !== '' ? `@${userProfile.displayName}` : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠'
            } ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Ç‡πà‡∏≤‡∏¢‡∏Ñ‡πà‡∏∞ ${headers}`
          : `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ üôè ‡∏Ñ‡∏∏‡∏ì ${
              userProfile.displayName !== '' ? `@${userProfile.displayName}` : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠'
            } ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Ç‡πà‡∏≤‡∏¢‡∏Ñ‡πà‡∏∞ ${headers}`,
        MESSAGE_TYPE.NORMAL
      );
    }
  } catch (error) {
    Logger.log(`[fmBuildingOperator()] error: ${error}`);
  }
};

const doPost = async (e) => {
  const fmCommandRegex = new RegExp(
    /^(\bFM Building\b)[\s]*([‡∏Å-‡πèa-zA-Z 0-9$&+,:;=?@#|'<>.^*()%!-/\\/]+)/i
  );
  const data = JSON.parse(e.postData.contents);
  Logger.log(`[doPost()] data: ${JSON.stringify(data)}`);
  const messages = data.events[0].message.text;
  Logger.log(`[doPost()] messages: ${messages}`);

  if (fmCommandRegex.test(messages.trim())) {
    Logger.log(`[doPost()] fmCommandRegex.text : ${fmCommandRegex.test(messages.trim())}`);
    Logger.log(`[doPost()] fmCommandRegex ${messages.trim().match(fmCommandRegex)}`);
    switch (messages.trim().match(fmCommandRegex)[2].toLowerCase()) {
      case 'search':
        Logger.log(`[doPost()] search:`);
        await replyMessage(
          data.events[0].replyToken,
          'https://script.google.com/macros/s/AKfycbxNch6dIicX2YK8DXyKyi0Ayes99Ca4FBFAXEVncQ/exec?v=project-list',
          MESSAGE_TYPE.NORMAL
        );
        break;
      case 'no operator':
        Logger.log(`[doPost()] no operator:`);
        await fmBuildingOperator(data.events[0], true, [
          'TOT Progress',
          'AIS Progress',
          '3BB Progress',
          'Sinet Progress',
          'FN Progress',
          'True Progress',
        ]);
        break;
      case 'operator':
        Logger.log(`[doPost()] operator:`);
        await fmBuildingOperator(data.events[0], false, [
          'TOT Progress',
          'AIS Progress',
          '3BB Progress',
          'Sinet Progress',
          'FN Progress',
          'True Progress',
        ]);
        break;
      case 'no tot':
        Logger.log(`[doPost()] no tot:`);
        await fmBuildingOperator(data.events[0], true, ['TOT Progress'], '(TOT)');
        break;
      case 'tot':
        Logger.log(`[doPost()] tot:`);
        await fmBuildingOperator(data.events[0], false, ['TOT Progress'], '(TOT)');
        break;
      case 'no ais':
        Logger.log(`[doPost()] no ais:`);
        await fmBuildingOperator(data.events[0], true, ['AIS Progress'], '(AIS)');
        break;
      case 'ais':
        Logger.log(`[doPost()] ais:`);
        await fmBuildingOperator(data.events[0], false, ['AIS Progress'], '(AIS)');
        break;
      case 'no 3bb':
        Logger.log(`[doPost()] no 3bb:`);
        await fmBuildingOperator(data.events[0], true, ['3BB Progress'], '(3BB)');
        break;
      case '3bb':
        Logger.log(`[doPost()] 3bb:`);
        await fmBuildingOperator(data.events[0], false, ['3BB Progress'], '(3BB)');
        break;
      case 'no sinet':
        Logger.log(`[doPost()] no sinet:`);
        await fmBuildingOperator(data.events[0], true, ['Sinet Progress'], '(Sinet)');
        break;
      case 'sinet':
        Logger.log(`[doPost()] sinet:`);
        await fmBuildingOperator(data.events[0], false, ['Sinet Progress'], '(Sinet)');
        break;
      case 'no fn':
        Logger.log(`[doPost()] no fn:`);
        await fmBuildingOperator(data.events[0], true, ['FN Progress'], '(Fn)');
        break;
      case 'fn':
        Logger.log(`[doPost()] fn:`);
        await fmBuildingOperator(data.events[0], false, ['FN Progress'], '(Fn)');
        break;
      case 'no true':
        Logger.log(`[doPost()] no true:`);
        await fmBuildingOperator(data.events[0], true, ['True Progress'], '(True)');
        break;
      case 'true':
        Logger.log(`[doPost()] true:`);
        await fmBuildingOperator(data.events[0], false, ['True Progress'], '(True)');
        break;
      default:
        Logger.log(`[doPost()] default:`);
        await fmBuildingCondoName(data.events[0], String(messages.trim().match(fmCommandRegex)[2]));
        break;
    }
  } else {
    Logger.log(`[doPost()] fmCommandRegex.text : ${fmCommandRegex.test(messages.trim())}`);
  }
  return ContentService.createTextOutput(
    JSON.stringify({
      status: 'ok',
    })
  ).setMimeType(ContentService.JSON);
};

const doGet = (e) => {
  Route.path('project-list', loadUi);
  if (Route[e.parameters.v]) {
    return Route[e.parameters.v]();
  }
  return render('404');
};

module.exports = {
  doGet,
  doPost,
};